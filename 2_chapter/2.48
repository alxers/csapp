As mentioned in Problem 2.6, the integer 3,510,593 has hexadecimal representation 0x00359141, while the single-precision, floating-point number 3510593.0 has
hexadecimal representation 0x4A564504. Derive this floating-point representation and explain the correlation between the bits of the integer and floating-point
representations.

*In the single-precision floating-point format (a float in C), fields s, exp, and frac are 1, k = 8, and n = 23 bits each, yielding a 32-bit representation. 

Solution:
We take binary representation of 3,510,593.
1) hex to binary
0x 0    0    3    5    9    1    4    1
   0000 0000 0011 0101 1001 0001 0100 0001
   
   or 11 0101 1001 0001 0100 0001 <-- 22 bits
   
2) Create a normalized representation of 3,510,593 by shifting 21 positions to the right (we shift 2^(n-1) = 2^21 ?)
3,510,593 = 1.1 0101 1001 0001 0100 0001 * 2^21

3) We drop the leading 1 and add 2 zeroes to the end (2 zeroes because we need to form frac which is 23 bits for single-precision floating)
1010 1100 1000 1010 0000 100

4) Construct the exponent by adding 127 + 21 bias which is 148 (1001 0100) and combine it with sign bit of 0
1001 0100 1010 1100 1000 1010 0000 100


Compare with the initial binary value
00000000001101011001000101000001
   1001010010101100100010100000100
