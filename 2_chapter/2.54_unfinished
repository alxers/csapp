Assume variables x, f, and d are of type int, float, and double, respectively.
Their values are arbitrary, except that neither f nor d equals +inf, -inf, or NaN.
For each of the following C expressions, either argue that it will always be true
(i.e., evaluate to 1) or give a value for the variables such that it is not true (i.e.,
evaluates to 0).
A. x == (int)(double) x
B. x == (int)(float) x
C. d == (double)(float) d
D. f == (float)(double) f
E. f == -(-f)
F. 1.0/2 == 1/2.0
G. d*d >= 0.0
H. (f+d)-f == d

Solution:
A. x == (int)(double) x.
x is an int, converting int to double is ok. The exact value can be preserved.
Converting it back to int should not create any issues.
True

B. x == (int)(float) x.
True

C. d == (double)(float) d
d is double, converting double to float may overflow to +inf or -inf.
So MAX_DOUBLE will cause the overflow.
Not true

D. f == (float)(double) f
We convert float to double. The exact value can be preserved.
Then we convert it back to float.
True

E. f == -(-f)
True? (what if f = 0 ?)

F. 1.0/2 == 1/2.0

G. d*d >= 0.0
If they overflow then it might not be >= 0.0 ?

H. (f+d)-f == d
(f+d) can overflow? So false?
