LEA instruction can perform computation of the form (a << k) + b, where k is either 0, 1, 2 or 3, and b is either 0 or some program value. The compiler often uses this instruction to perform multiplications by constant factors. F.e. 3 * a can be computed as (a << 1) + a.

Considering cases where b is either 0 or equal to a, and all possible values of k, what multiples of a can be computed with a single LEA instruction?

// Example
a = 5;
3 * 5 = 15;
0101 = 5 in binary;
0101 << 1 = 1010 = 10;
10 + 5 = 15;
// End example

Answer: Left shift by k multiplies number by 2^k. When b = 0 we have a*2^k, when b = a, we have a*2^k + a = a(2^k + 1).

By definition x if a multiple of a if x = na, for some integer n.
So n can be either 2^k or 2^k+1.
Consider the following:

When n = 2^k
k 0 1 2 3
n 1 2 4 8

When n = 2^k+1
k 0 1 2 3
n 1 3 5 9